name: Build Everything

permissions:
  contents: write

on: push

jobs:

  information_env:
    name: Knowledge About env
    runs-on: ubuntu-latest
    steps:
      - name: Dump github context global data
        run:   export
        shell: bash

  information_github:
    name: Knowledge About github
    runs-on: ubuntu-latest
    steps:
      - name: Dump github context global data
        run:   echo "$GITHUB_CONTEXT"
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

  information_ubuntu:
    name: Knowledge About runner ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Dump runner context global data
        run:   echo "$RUNNER_CONTEXT"
        shell: bash
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}

  build_windows_linux:
    name: ${{ matrix.target }} ${{ matrix.target_detail }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        include:

          - os: ubuntu-latest
            target: Linux
            target_detail: Release
            build_target: linux
            build_mode: release
            build_path: build/linux/x64/release/bundle
            # asset_extension: .tar.gz
            # asset_content_type: application/gzip

          - os: ubuntu-latest
            target: Linux
            target_detail: Debug
            build_target: linux
            build_mode: debug
            build_path: build/linux/x64/debug/bundle
            # asset_extension: .tar.gz
            # asset_content_type: application/gzip

          - os: windows-latest
            target: Windows
            target_detail: Release
            build_target: windows
            build_mode: release
            build_path: build\windows\runner\Release
            # asset_extension: .zip
            # asset_content_type: application/zip

          - os: windows-latest
            target: Windows
            target_detail: Debug
            build_target: windows
            build_mode: debug
            build_path: build\windows\runner\Debug
            # asset_extension: .zip
            # asset_content_type: application/zip

    steps:
      # Set up Flutter.
      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@9d48f4efd5460d7013af812069d08b23f37aed20
        with:
          channel: stable

      - name: Install Linux dependencies
        if: matrix.target == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev

      - name: Enable Windows desktop support
        if: matrix.target == 'Windows'
        run: flutter config --enable-windows-desktop

      - name: Enable Linux desktop support
        if: matrix.target == 'Linux'
        run: flutter config --enable-linux-desktop

      - run: flutter doctor -v

      # Checkout gallery code, recreate missing files, and get packages.
      - name: Checkout gallery code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: flutter create .
      - run: flutter pub get

      # Build the application.
      - run: flutter build ${{ matrix.build_target }} --${{ matrix.build_mode }}

      # Package the build.
      - name: Copy VC redistributables to release directory for Windows
        if: matrix.target == 'Windows'
        run: |
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\msvcp140.dll') .
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140.dll') .
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140_1.dll') .
        working-directory: ${{ matrix.build_path }}

      - name: Make a dist directory
        run: mkdir ${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist

      - name: Compress build for Linux
        if: matrix.target == 'Linux'
        run: |
          ls -alrt
          tar czf $GITHUB_WORKSPACE/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.tar.gz *
        working-directory: ${{ matrix.build_path }}

      - name: Compress build for Windows
        if: matrix.target == 'Windows'
        run: |
          dir
          compress-archive -Path * -DestinationPath ${env:GITHUB_WORKSPACE}\${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist\${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.zip
        working-directory: ${{ matrix.build_path }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}
          path: |
            ${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/

      - name: Release
        if: github.ref_type == 'tag'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          replacesArtifacts: true
          commit: ${{ env.USER_SHA }}
          tag: ${{ env.USER_GITHUB_REF_NAME }}
          artifacts: "${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/*.*"
          token: ${{ secrets.ACTIONS_CREATE_RELEASE_REPO_SECRET }}
        env:
          USER_GITHUB_SHA: ${{ github.sha }}
          USER_GITHUB_REF_NAME: ${{ github.ref_name }}

      # Error: Container action is only supported on Linux
      - name: Sourceforge
        if: matrix.os == 'ubuntu-latest'
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: 'andremikulec,andremikulec.u'
          server: 'frs.sourceforge.net'
          local_path:  './${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/*.*'
          remote_path: '/home/frs/project/andremikulec'
          password: '${{ secrets.FTP_PSW_SECRET }}'
          sftpArgs: '-o CheckHostIP=no -o StrictHostKeyChecking=no'

  build_apk_appbundle_ios_macos_web:
    name: ${{ matrix.target }} ${{ matrix.target_detail }}
    runs-on: macos-latest
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        include:

          - os: macos-latest
            target: Android
            target_detail: Debug
            build_target: apk
            build_mode: debug
            build_path: build/app/outputs/flutter-apk
            # asset_extension: .zip
            # asset_content_type: application/zip
            # asset_extension: .apk
            # asset_content_type: application/vnd.android.package-archive

          - os: macos-latest
            target: macOS
            target_detail: Debug
            build_target: macos
            build_mode: debug
            build_path: build/macos/Build/Products/Debug
            # asset_extension: .zip
            # asset_content_type: application/zip

         #  "appbundle --debug", "ios --no-codesign", web
         #
         # Note, no such option combination exists "web --debug"
         # Note, exists: "web --release"
         #
          - os: macos-latest
            target: Web
            target_detail: Release
            build_target: web
            build_mode: release
            build_path: build/web
            # asset_extension: .tar.gz
            # asset_content_type: application/gzip

          - os: macos-latest
            target: Android_AppBundle
            target_detail: Debug
            build_target: appbundle
            build_mode: debug
            build_path: build/app/outputs/bundle/debug
            # asset_extension: .zip
            # asset_content_type: application/zip
            # asset_extension: .aab
            # asset_content_type:  application/x-authorware-bin

          - os: macos-latest
            target: iOS
            target_detail: NoCodeSign
            build_target: ipa
            build_mode: no-codesign
            build_path: build/ios/archive
            # asset_extension: .zip
            # asset_content_type: application/zip
            # asset_extension: .ipa
            # asset_content_type: application/octet-stream  ??
            # asset_extension: .tar.gz
            # asset_content_type: application/gzip

    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
      # Set up Flutter.
      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@9d48f4efd5460d7013af812069d08b23f37aed20
        with:
          channel: stable
      - run: flutter config --enable-macos-desktop
      - run: flutter doctor

      # Checkout gallery code and get packages.
      - name: Checkout gallery code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: flutter pub get

      - run: flutter build ${{ matrix.build_target }} --${{ matrix.build_mode }}

      - name: Make a dist directory
        run: mkdir ${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist

#     - name: Configure Keystore for Android
#       if: matrix.target == 'Android'
#       run: |
#         echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
#         echo "storeFile=upload-keystore.jks" >> key.properties
#         echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
#         echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
#         echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
#       env:
#         PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
#         KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
#         KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
#         KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
#       working-directory: android

      - name: Rename build for Android
        if: matrix.target == 'Android'
        run: |
          ls -alrt
          ditto -c -k --sequesterRsrc app-${{ matrix.build_mode }}.apk $GITHUB_WORKSPACE/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.zip
        working-directory: ${{ matrix.build_path }}

      - name: Compress build for macOS
        if: matrix.target == 'macOS'
        run: |
          ls -alrt
          ditto -c -k --sequesterRsrc --keepParent *.app $GITHUB_WORKSPACE/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.zip
        working-directory: ${{ matrix.build_path }}

      - name: Compress build for Web
        if: matrix.target == 'Web'
        run: |
          ls -alrt
          tar czf $GITHUB_WORKSPACE/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.tar.gz *
        working-directory: ${{ matrix.build_path }}

      - name: Rename build for Android AppBundle
        if: matrix.target == 'Android_AppBundle'
        run: |
          ls -alrt
          ditto -c -k --sequesterRsrc app-${{ matrix.build_mode }}.aab $GITHUB_WORKSPACE/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.zip
        working-directory: ${{ matrix.build_path }}

      - name: Compress build for iOS
        if: matrix.target == 'iOS'
        run: |
          # ditto -c -k --sequesterRsrc app-${{ matrix.build_mode }}.ipa $GITHUB_WORKSPACE/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.zip
          tar czf $GITHUB_WORKSPACE/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.tar.gz *
        working-directory: ${{ matrix.build_path }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}
          path: |
            ${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/

      - name: Release
        if: github.ref_type == 'tag'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          replacesArtifacts: true
          commit: ${{ env.USER_SHA }}
          tag: ${{ env.USER_GITHUB_REF_NAME }}
          artifacts: "${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/*.*"
          token: ${{ secrets.ACTIONS_CREATE_RELEASE_REPO_SECRET }}
        env:
          USER_GITHUB_SHA: ${{ github.sha }}
          USER_GITHUB_REF_NAME: ${{ github.ref_name }}


