name: Build Everything

permissions:
  contents: write

on: push

jobs:

  information_env:
    name: Knowledge About env
    runs-on: ubuntu-latest
    steps:
      - name: Dump github context global data
        run:   export
        shell: bash

  information_github:
    name: Knowledge About github
    runs-on: ubuntu-latest
    steps:
      - name: Dump github context global data
        run:   echo "$GITHUB_CONTEXT"
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

  information_ubuntu:
    name: Knowledge About runner ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Dump runner context global data
        run:   echo "$RUNNER_CONTEXT"
        shell: bash
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}

  build_windows_linux:
    name: ${{ matrix.target }} ${{ matrix.target_detail }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        include:

          - os: ubuntu-latest
            target: Linux
            target_detail: Release
            build_target: linux
            build_mode: release
            build_path: build/linux/x64/release/bundle
            # asset_extension: .tar.gz
            # asset_content_type: application/gzip

          - os: ubuntu-latest
            target: Linux
            target_detail: Debug
            build_target: linux
            build_mode: debug
            build_path: build/linux/x64/debug/bundle
            # asset_extension: .tar.gz
            # asset_content_type: application/gzip

          - os: windows-latest
            target: Windows
            target_detail: Release
            build_target: windows
            build_mode: release
            build_path: build\windows\runner\Release
            # asset_extension: .zip
            # asset_content_type: application/zip

          - os: windows-latest
            target: Windows
            target_detail: Debug
            build_target: windows
            build_mode: debug
            build_path: build\windows\runner\Debug
            # asset_extension: .zip
            # asset_content_type: application/zip

    steps:
    
      - name: Check curl Availability on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl --help
    
      - name: Install sshpass on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install sshpass
    
      - name: Check curl Availability on Windows
        if: matrix.os == 'windows-latest'
        run: |
          curl --help
    
      - name: Choco Install WinSCP
        if: matrix.os == 'windows-latest'
        uses: crazy-max/ghaction-chocolatey@v2
        with:
          args: install -y winscp
    
      # Set up Flutter.
      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@9d48f4efd5460d7013af812069d08b23f37aed20
        with:
          channel: stable

      - name: Install Linux dependencies
        if: matrix.target == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev

      - name: Enable Windows desktop support
        if: matrix.target == 'Windows'
        run: flutter config --enable-windows-desktop

      - name: Enable Linux desktop support
        if: matrix.target == 'Linux'
        run: flutter config --enable-linux-desktop

      - run: flutter doctor -v

      # Checkout gallery code, recreate missing files, and get packages.
      - name: Checkout gallery code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: flutter create .
      - run: flutter pub get

      # Build the application.
      - run: flutter build ${{ matrix.build_target }} --${{ matrix.build_mode }}

      # Package the build.
      - name: Copy VC redistributables to release directory for Windows
        if: matrix.target == 'Windows'
        run: |
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\msvcp140.dll') .
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140.dll') .
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140_1.dll') .
        working-directory: ${{ matrix.build_path }}

      - name: Make a dist directory
        run: mkdir ${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist

      - name: Compress build for Linux
        if: matrix.target == 'Linux'
        run: |
          ls -alrt
          tar czf ${GITHUB_WORKSPACE}/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.tar.gz *
        working-directory: ${{ matrix.build_path }}

      - name: Compress build for Windows
        if: matrix.target == 'Windows'
        run: |
          echo ${{ matrix.build_path }}
          dir ${env:GITHUB_WORKSPACE}
          compress-archive -Path * -DestinationPath ${env:GITHUB_WORKSPACE}\${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist\${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.zip
          dir ${env:GITHUB_WORKSPACE}\${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist\${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.zip
        working-directory: ${{ matrix.build_path }}
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}
          path: |
            ${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/

      - name: Release
        if: github.ref_type == 'tag'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          replacesArtifacts: true
          commit: ${{ env.USER_SHA }}
          tag: ${{ env.USER_GITHUB_REF_NAME }}
          artifacts: "${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/*.*"
          token: ${{ secrets.ACTIONS_CREATE_RELEASE_REPO_SECRET }}
        env:
          USER_GITHUB_SHA: ${{ github.sha }}
          USER_GITHUB_REF_NAME: ${{ github.ref_name }}



      # https://man.openbsd.org/ssh_config
      # https://man.openbsd.org/ssh
      # https://man.openbsd.org/sftp
      #
      # StrictHostKeyChecking
      #
      # O.K. - FOR FIRE AND FORGET BUILD JOBS
      # accept-new then ssh will automatically add
      #            new host keys to the users known_hosts file, 
      #            but will not permit
      #            connections to hosts with changed host keys.
      #
      # no If this flag is set
      #    to no or off, ssh will automatically add new host keys to the
      #    user known hosts files and allow connections to hosts with
      #    changed hostkeys to proceed, subject to some restrictions
      #
      # https://www.freebsd.org/cgi/man.cgi?ssh_config(5)
      # https://www.freebsd.org/cgi/man.cgi?query=ssh&sektion=1
      # https://www.freebsd.org/cgi/man.cgi?query=sftp
      #
      #      -b batchfile
      #       Batch mode reads a series of commands from an input batchfile in-
      #       stead of stdin.  Since it lacks user interaction it should be
      #       used in conjunction with non-interactive authentication
      # 
      # https://www.freebsd.org/cgi/man.cgi?query=sftp&sektion=1

      # How To Use sshpass For Non-interactive SSH login In Scripts In Linux And FreeBSD
      #
      # SEE through "ps" command
      # sshpass -p <remote-password> ssh remoteuser@ip-address
      #
      # SEE through a "history" file
      # SSHPASS=almalinux sshpass -e ssh ostechnix@192.168.1.2
      #
      # SSH Password automation with sshpass in shell scripts in Linux and Unix
      # Written by Sk October 11, 2022 
      #
      # DO NOT SEE
      # export SSHPASS=almalinux
      # sshpass -e ssh ostechnix@192.168.1.20
      #
      # https://ostechnix.com/sshpass-noninteractive-ssh-password-provider/
      #
      # # sshpass [-ffilename|-dnum|-ppassword|-e] [options] command arguments
      # https://linux.die.net/man/1/sshpass
      
      # # SFTP does not like the Sourceforge old "User" name ("name" needs to be quoted)
      # AnonymousUser@ANONYMOUST ~
      # $ sftp andremikulec,andremikulec.u@frs.sourceforge.net
      # (andremikulec,andremikulec.u@frs.sourceforge.net) Password:
      # (andremikulec,andremikulec.u@frs.sourceforge.net) Password:
      # #
      # # The newer simple form
      # AnonymousUser@ANONYMOUST ~
      # $ sftp   andremikulec@frs.sourceforge.net
      # (andremikulec@frs.sourceforge.net) Password:
      # Connected to frs.sourceforge.net.
      # #
      # AnonymousUser@ANONYMOUST ~
      # $ sftp  "andremikulec,andremikulec.u"@frs.sourceforge.net
      # $ sftp  'andremikulec,andremikulec.u'@frs.sourceforge.net
      # (andremikulec,andremikulec.u@frs.sourceforge.net) Password:
      # Connected to frs.sourceforge.net.
      #
      # Other "User" Problem 
      # SOLUTION: Put "Host" and "User" into ~/.ssh/config
      # Git-bash : ssh: start over, passed a different list publickey,password
      # 2017 SEEN NOV 2022
      # https://stackoverflow.com/questions/41818473/git-bash-ssh-start-over-passed-a-different-list-publickey-password
      # AND
      # Simplify Your Life With an SSH Config File
      # https://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/
      #
      # Other USAGE
      # https://www.freebsd.org/cgi/man.cgi?ssh_config(5)
      #
      # -o LogLevel=DEBUG3 -o Compression=yes -o ConnectTimeout=60
      #

      # Note: SSHPass must be Previously installed (see above)
      - name: Linux SFTP Sourceforge via SFTP and SSHPass
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo put ${GITHUB_WORKSPACE}/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.tar.gz /home/frs/project/andremikulec > ftplinux.txt
          echo exit >> ftplinux.txt
          #
          # export SSHPASS=${{ secrets.FTP_PSW_SECRET }} # with -e
          #
          # -b implies -o BatchMode=yes
          # -C implies -o Compression=yes (Most often I send a .zip or .7z. Therefore, I had already compressed.)
          #
          # -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no
          # https://github.com/arn4/tesi-triennale/blob/3302e9b812806c59337f7c3a483b35dc417544cf/.github/workflows/build.yml
          #
          sshpass -e sftp -b ftplinux.txt -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ''andremikulec,andremikulec.u''@frs.sourceforge.net 2>&1>/dev/null
        env:
          SSHPASS: ${{ secrets.FTP_PSW_SECRET }}


      # https://codebeautify.org/yaml-validator
      #
      - name: Linux SFTP Sourceforge via SFTP-Deploy-Action
        if: matrix.os == 'ubuntu-latest'
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: '''andremikulec,andremikulec.u'''
          server: 'frs.sourceforge.net'
          local_path:  '${GITHUB_WORKSPACE}/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.tar.gz'
          remote_path: '/home/frs/project/andremikulec'
          password: '${{ secrets.FTP_PSW_SECRET }}'
          sftpArgs: '-o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no'



      # https://winscp.net/eng/docs/scriptcommand_open
      #
      - name: WinSCP Sends Windows App to Sourceforge
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          echo %GITHUB_WORKSPACE% 
          echo open sftp://andremikulec,andremikulec.u:${{ secrets.FTP_PSW_SECRET }}@frs.sourceforge.net/ -hostkey="*" > ftp.txt 2>&1 || date /t
          echo put %GITHUB_WORKSPACE%\${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist\${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.zip /home/frs/project/andremikulec/ >> ftp.txt
          echo exit >> ftp.txt
          set PATH=C:\Program Files (x86)\WinSCP;%PATH%
          winscp.com /script=ftp.txt || date /t

  build_apk_appbundle_ios_macos_web:
    name: ${{ matrix.target }} ${{ matrix.target_detail }}
    runs-on: macos-latest
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        include:

          - os: macos-latest
            target: Android
            target_detail: Debug
            build_target: apk
            build_mode: debug
            build_path: build/app/outputs/flutter-apk
            # asset_extension: .zip
            # asset_content_type: application/zip
            # asset_extension: .apk
            # asset_content_type: application/vnd.android.package-archive

          - os: macos-latest
            target: macOS
            target_detail: Debug
            build_target: macos
            build_mode: debug
            build_path: build/macos/Build/Products/Debug
            # asset_extension: .zip
            # asset_content_type: application/zip

         #  "appbundle --debug", "ios --no-codesign", web
         #
         # Note, no such option combination exists "web --debug"
         # Note, exists: "web --release"
         #
          - os: macos-latest
            target: Web
            target_detail: Release
            build_target: web
            build_mode: release
            build_path: build/web
            # asset_extension: .tar.gz
            # asset_content_type: application/gzip

          - os: macos-latest
            target: Android_AppBundle
            target_detail: Debug
            build_target: appbundle
            build_mode: debug
            build_path: build/app/outputs/bundle/debug
            # asset_extension: .zip
            # asset_content_type: application/zip
            # asset_extension: .aab
            # asset_content_type:  application/x-authorware-bin

          - os: macos-latest
            target: iOS
            target_detail: NoCodeSign
            build_target: ipa
            build_mode: no-codesign
            build_path: build/ios/archive
            # asset_extension: .zip
            # asset_content_type: application/zip
            # asset_extension: .ipa
            # asset_content_type: application/octet-stream  ??
            # asset_extension: .tar.gz
            # asset_content_type: application/gzip

    steps:

      - name: Install Xcode (only needed for "Xcode Tools" then "askpass" install)
        if: matrix.os == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

          # With Xcode 5.0.1 and Mavericks 10.9 
          # the command line tool is no longer available through Xcode.
          # Instead they must be downloaded from the 
          # Apple Developer Tools site: https://developer.apple.com/downloads/index.action. 
          # This requires signing in with a developer account.
          # 
          # You can also login at developer.apple.com (fee account is fine) 
          # and download it there. I was the only way for me. 
          # 
          # sudo xcode-select --install
          # 
          # produces the following GUI: [Install]
          # 
          # How to install Xcode Command Line Tools
          # https://stackoverflow.com/questions/9329243/how-to-install-xcode-command-line-tools
          # 

      - name: Check curl Availability on MacOS
        if: matrix.os == 'macos-latest'
        run: |
          curl --help

      - name: Install MacPorts from Git and sshpass from Port On MacOs
        if: matrix.os == 'macos-latest'
        run: |
          # mkdir -p mports
          # cd mports
          # git clone https://github.com/macports/macports-base.git
          # cd macports-base
          # git checkout v2.8.0  # skip this if you want to use the development version
          # ./configure --enable-readline
          # make
          # sudo make install
          # make distclean
          # cd ../..
          # ANDRE FOUND in "install output" - does not work
          # export PATH=/opt/local/libexec/macports/bin:$PATH
          #
          # 2.5. MacPorts and the Shell
          # https://guide.macports.org/chunked/installing.shell.html
          #
          # export PATH=/opt/local/bin:/opt/local/sbin:$PATH
          # export MANPATH=/opt/local/share/man:$MANPATH
          # export DISPLAY=:0.0
          #
          # port(1) Manual Page
          # https://man.macports.org/port.1.html#_user_actions
          #
          # port help install 
          #
          # Non-interactive ssh password authentication
          #   sudo port install sshpass
          # https://ports.macports.org/port/sshpass/
          #
          # port install sshpass || true # Error: Insufficient privileges to write to MacPorts install prefix.
          # sudo port install sshpass || true # Error: Port sshpass not found
          # /opt/local/bin/port install sshpass || true # Error: Insufficient privileges to write to MacPorts install prefix.
          # sudo /opt/local/bin/port install sshpass || true # Error: Port sshpass not found
          # /opt/local/sbin/port install sshpass || true # No such file or directory
          # sudo /opt/local/sbin/port install sshpass || true # command not found
          
          # installed
          # curl -L https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb > sshpass.rb && brew install sshpass.rb && rm sshpass.rb
          # 
          # How to install sshpass on Mac?
          #   For Mac you will need to install xcode and command line tools then use the unofficial Homewbrew command:
          # LAST MODIFIED 2021 - SEEN NOV 2022
          # https://stackoverflow.com/questions/32255660/how-to-install-sshpass-on-mac
          #
          # How can I install the Command Line Tools completely from the command line?
          # HARD!
          # https://apple.stackexchange.com/questions/107307/how-can-i-install-the-command-line-tools-completely-from-the-command-line
          # 
          # curl -L https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb > sshpass.rb && brew install sshpass.rb && rm sshpass.rb
          # NOTHING I CAN DO
          echo NOTHING I CAN DO
          # try with Xcode but without the command line tools
          curl -L https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb > sshpass.rb && brew install sshpass.rb && rm sshpass.rb

          # if I need to append to a (root user) startup script
          # /root/.bashrc
          # https://askubuntu.com/questions/31501/where-is-bashrc-profile-for-root
          
          
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
      # Set up Flutter.
      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@9d48f4efd5460d7013af812069d08b23f37aed20
        with:
          channel: stable
      - run: flutter config --enable-macos-desktop
      - run: flutter doctor

      # Checkout gallery code and get packages.
      - name: Checkout gallery code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: flutter pub get

      - run: flutter build ${{ matrix.build_target }} --${{ matrix.build_mode }}

      - name: Make a dist directory
        run: mkdir ${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist

#     - name: Configure Keystore for Android
#       if: matrix.target == 'Android'
#       run: |
#         echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
#         echo "storeFile=upload-keystore.jks" >> key.properties
#         echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
#         echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
#         echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
#       env:
#         PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
#         KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
#         KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
#         KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
#       working-directory: android

      - name: Rename build for Android
        if: matrix.target == 'Android'
        run: |
          ls -alrt
          ditto -c -k --sequesterRsrc app-${{ matrix.build_mode }}.apk ${GITHUB_WORKSPACE}/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.zip
        working-directory: ${{ matrix.build_path }}

      - name: Compress build for macOS
        if: matrix.target == 'macOS'
        run: |
          ls -alrt
          ditto -c -k --sequesterRsrc --keepParent *.app ${GITHUB_WORKSPACE}/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.zip
        working-directory: ${{ matrix.build_path }}

      - name: Compress build for Web
        if: matrix.target == 'Web'
        run: |
          ls -alrt
          tar czf ${GITHUB_WORKSPACE}/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.tar.gz *
        working-directory: ${{ matrix.build_path }}

      - name: Rename build for Android AppBundle
        if: matrix.target == 'Android_AppBundle'
        run: |
          ls -alrt
          ditto -c -k --sequesterRsrc app-${{ matrix.build_mode }}.aab ${GITHUB_WORKSPACE}/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.zip
        working-directory: ${{ matrix.build_path }}

      - name: Compress build for iOS
        if: matrix.target == 'iOS'
        run: |
          # ditto -c -k --sequesterRsrc app-${{ matrix.build_mode }}.ipa ${GITHUB_WORKSPACE}/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.zip
          tar czf ${GITHUB_WORKSPACE}/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}.tar.gz *
        working-directory: ${{ matrix.build_path }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}
          path: |
            ${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/

      - name: Release
        if: github.ref_type == 'tag'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          replacesArtifacts: true
          commit: ${{ env.USER_SHA }}
          tag: ${{ env.USER_GITHUB_REF_NAME }}
          artifacts: "${{ github.event.repository.name }}_${{ matrix.target }}_${{ matrix.target_detail }}_dist/*.*"
          token: ${{ secrets.ACTIONS_CREATE_RELEASE_REPO_SECRET }}
        env:
          USER_GITHUB_SHA: ${{ github.sha }}
          USER_GITHUB_REF_NAME: ${{ github.ref_name }}


